- name: Fail when OS family not supported and no override configured
  when: >-
    (pyenv_os_pkgs | length < 1)
    and (ansible_os_family | lower not in pyenv_os_families)
  fail:
    msg: The target OS family is not Debian nor RedHat. Use var 'pyenv_os_pkgs'.

- name: Include vars depending on OS family and override
  when: (pyenv_os_pkgs is not iterable) or (pyenv_os_pkgs | length < 1)
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "os-{{ ansible_os_family | lower }}.yaml"
      paths:
        - vars

# See <https://github.com/pyenv/pyenv/wiki#suggested-build-environment>.
- name: Install OS packages
  package:
    name: "{{ pyenv_os_pkgs }}"
    state: present
  become: true

- name: Install pyenv
  shell: |
    if [ ! -d ~/.pyenv ]; then
      curl -sSL https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash

      if [ $? -ne 0 ]; then
        exit 1
      else
        echo status=changed
      fi
    fi
  args:
    executable: /bin/bash
  register: task
  changed_when: "'status=changed' in task.stdout"

- name: Add init code to `~/.profile`
  blockinfile:
    path: ~/.profile
    insertbefore: BOF
    marker: "# {mark} :: ANSIBLE MANAGED BLOCK :: {{ role_name }} :: pyenv execs and shims"
    block: |
      # Add pyenv executable to PATH and enable shims
      export PYENV_ROOT="$HOME/.pyenv"
      export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init --path)"

- name: Add init code to `~/.bashrc`
  blockinfile:
    path: ~/.bashrc
    marker: "# {mark} :: ANSIBLE MANAGED BLOCK :: {{ role_name }} :: pyenv and venv load shell"
    block: |
      # Load pyenv into the shell
      eval "$(pyenv init -)"
      # Load pyenv-virtualenv automatically
      eval "$(pyenv virtualenv-init -)"

- name: Git checkout pyenv-virtualenv
  git:
    repo: https://github.com/pyenv/pyenv-virtualenv
    dest: ~/.pyenv/plugins/pyenv-virtualenv

- name: Install Python {{ pyenv_global_python_version }} and enable it globally
  shell: |
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"

    pyenv global {{ pyenv_global_python_version }} || true

    if [ $(pyenv global) != {{ pyenv_global_python_version }} ]; then
      pyenv install {{ pyenv_global_python_version }}
      pyenv global {{ pyenv_global_python_version }}

      if [ $(pyenv global) != {{ pyenv_global_python_version }} ]; then
        exit 1
      else
        echo status=changed
      fi
    fi
  register: task
  changed_when: "'status=changed' in task.stdout"
